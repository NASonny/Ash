class Voice_data(commands.Cog):
    def __init__ (self, bot: commands.Bot) -> None:
        self.bot = bot
        self.bot.event(self.on_voice_state_update)
    
    async def track_vc_time(member, joined_at=None, left_at=None):
        db = sqlite3.connect('voicetrack.db')
        cursor = db.cursor()

        # Insert/update database row 
        cursor.execute("""INSERT INTO voice_data (username, user_id, channel_id, joined_at, left_at)
                       VALUES (?, ?, ?, ?) 
                       ON CONFLICT(user_id, username, channel_id) DO UPDATE SET 
                       left_at = excluded.left_at, 
                       duration = datetime(left_at, 'unixepoch') - datetime(joined_at, 'unixepoch')
                       """, (member.display_name, member.id, channel.id, joined_at, left_at))

        db.commit()
        db.close()
        
    async def on_voice_state_update(member):
        if member.joined:
            track_vc_time(member, member.voice.channel, datetime.now())
            
        if member.left:
            track_vc_time(member, member.voice.channel, left_at=datetime.now()) 